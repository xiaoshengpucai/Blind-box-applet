{"version":3,"file":"useProductList.js","sources":["src/composables/useProductList.js"],"sourcesContent":["/**\r\n * 商品列表组合式函数\r\n * @description 提供商品列表的数据管理和操作逻辑\r\n */\r\nimport { ref, computed } from 'vue';\r\n\r\n// 排序类型常量\r\nexport const SORT_TYPES = {\r\n  DEFAULT: 'default',\r\n  NEW: 'new',\r\n  PRICE_ASC: 'priceAsc',\r\n  PRICE_DESC: 'priceDesc',\r\n  POPULAR: 'popular'\r\n};\r\n\r\n/**\r\n * 商品列表Hook\r\n * @param {Array} initialData - 初始商品数据\r\n * @returns {Object} 商品列表相关状态和方法\r\n */\r\nexport function useProductList(initialData = []) {\r\n  // ==================== 状态管理 ====================\r\n  const originalList = ref([...initialData]);\r\n  const productList = ref([...initialData]);\r\n  const currentSortType = ref(SORT_TYPES.DEFAULT);\r\n  const loading = ref(false);\r\n  const error = ref(null);\r\n  \r\n  // 分页相关\r\n  const currentPage = ref(1);\r\n  const pageSize = ref(20);\r\n  const hasMore = ref(true);\r\n\r\n  // ==================== 计算属性 ====================\r\n  /**\r\n   * 总商品数量\r\n   */\r\n  const totalCount = computed(() => productList.value.length);\r\n\r\n  /**\r\n   * 是否为空列表\r\n   */\r\n  const isEmpty = computed(() => totalCount.value === 0);\r\n\r\n  /**\r\n   * 分页显示的商品列表\r\n   */\r\n  const paginatedList = computed(() => {\r\n    const start = 0;\r\n    const end = currentPage.value * pageSize.value;\r\n    return productList.value.slice(start, end);\r\n  });\r\n\r\n  // ==================== 排序算法 ====================\r\n  const sortStrategies = {\r\n    [SORT_TYPES.DEFAULT]: (products) => [...originalList.value],\r\n    \r\n    [SORT_TYPES.NEW]: (products) => {\r\n      return [...products].sort((a, b) => {\r\n        const timeA = a.createTime || a.updateTime || 0;\r\n        const timeB = b.createTime || b.updateTime || 0;\r\n        return timeB - timeA;\r\n      });\r\n    },\r\n    \r\n    [SORT_TYPES.PRICE_ASC]: (products) => {\r\n      return [...products].sort((a, b) => {\r\n        const priceA = parseFloat(a.price) || 0;\r\n        const priceB = parseFloat(b.price) || 0;\r\n        return priceA - priceB;\r\n      });\r\n    },\r\n    \r\n    [SORT_TYPES.PRICE_DESC]: (products) => {\r\n      return [...products].sort((a, b) => {\r\n        const priceA = parseFloat(a.price) || 0;\r\n        const priceB = parseFloat(b.price) || 0;\r\n        return priceB - priceA;\r\n      });\r\n    },\r\n    \r\n    [SORT_TYPES.POPULAR]: (products) => {\r\n      return [...products].sort((a, b) => {\r\n        const popularityA = a.viewCount || a.likeCount || 0;\r\n        const popularityB = b.viewCount || b.likeCount || 0;\r\n        return popularityB - popularityA;\r\n      });\r\n    }\r\n  };\r\n\r\n  // ==================== 核心方法 ====================\r\n  /**\r\n   * 设置商品列表数据\r\n   * @param {Array} data - 商品数据\r\n   * @param {boolean} replace - 是否替换原有数据\r\n   */\r\n  const setProductList = (data, replace = true) => {\r\n    if (replace) {\r\n      originalList.value = [...data];\r\n      productList.value = [...data];\r\n      currentPage.value = 1;\r\n    } else {\r\n      // 追加数据（用于分页加载）\r\n      originalList.value.push(...data);\r\n      productList.value.push(...data);\r\n    }\r\n    \r\n    // 如果当前有排序，重新应用排序\r\n    if (currentSortType.value !== SORT_TYPES.DEFAULT) {\r\n      applySorting(currentSortType.value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 应用排序\r\n   * @param {string} sortType - 排序类型\r\n   */\r\n  const applySorting = (sortType) => {\r\n    if (!sortStrategies[sortType]) {\r\n      console.warn(`未知的排序类型: ${sortType}`);\r\n      return;\r\n    }\r\n    \r\n    currentSortType.value = sortType;\r\n    productList.value = sortStrategies[sortType](productList.value);\r\n  };\r\n\r\n  /**\r\n   * 重置排序\r\n   */\r\n  const resetSorting = () => {\r\n    applySorting(SORT_TYPES.DEFAULT);\r\n  };\r\n\r\n  /**\r\n   * 筛选商品\r\n   * @param {Function} filterFn - 筛选函数\r\n   */\r\n  const filterProducts = (filterFn) => {\r\n    if (typeof filterFn !== 'function') {\r\n      productList.value = [...originalList.value];\r\n      return;\r\n    }\r\n    \r\n    productList.value = originalList.value.filter(filterFn);\r\n    \r\n    // 重新应用当前排序\r\n    if (currentSortType.value !== SORT_TYPES.DEFAULT) {\r\n      applySorting(currentSortType.value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 搜索商品\r\n   * @param {string} keyword - 搜索关键词\r\n   * @param {Array} searchFields - 搜索字段\r\n   */\r\n  const searchProducts = (keyword, searchFields = ['title', 'description']) => {\r\n    if (!keyword.trim()) {\r\n      productList.value = [...originalList.value];\r\n      return;\r\n    }\r\n    \r\n    const lowerKeyword = keyword.toLowerCase();\r\n    productList.value = originalList.value.filter(product => {\r\n      return searchFields.some(field => {\r\n        const fieldValue = product[field];\r\n        return fieldValue && fieldValue.toString().toLowerCase().includes(lowerKeyword);\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * 加载更多数据（分页）\r\n   */\r\n  const loadMore = () => {\r\n    if (!hasMore.value || loading.value) return;\r\n    \r\n    currentPage.value += 1;\r\n    \r\n    // 检查是否还有更多数据\r\n    const maxPage = Math.ceil(totalCount.value / pageSize.value);\r\n    hasMore.value = currentPage.value < maxPage;\r\n  };\r\n\r\n  /**\r\n   * 刷新列表\r\n   */\r\n  const refresh = () => {\r\n    currentPage.value = 1;\r\n    hasMore.value = true;\r\n    error.value = null;\r\n    productList.value = [...originalList.value];\r\n    \r\n    // 重新应用当前排序\r\n    if (currentSortType.value !== SORT_TYPES.DEFAULT) {\r\n      applySorting(currentSortType.value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 添加商品\r\n   * @param {Object} product - 商品数据\r\n   */\r\n  const addProduct = (product) => {\r\n    const newProduct = {\r\n      ...product,\r\n      id: product.id || `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      createTime: Date.now()\r\n    };\r\n    \r\n    originalList.value.unshift(newProduct);\r\n    \r\n    // 重新应用当前排序和筛选\r\n    refresh();\r\n  };\r\n\r\n  /**\r\n   * 删除商品\r\n   * @param {string} productId - 商品ID\r\n   */\r\n  const removeProduct = (productId) => {\r\n    const originalIndex = originalList.value.findIndex(p => p.id === productId);\r\n    const currentIndex = productList.value.findIndex(p => p.id === productId);\r\n    \r\n    if (originalIndex !== -1) {\r\n      originalList.value.splice(originalIndex, 1);\r\n    }\r\n    \r\n    if (currentIndex !== -1) {\r\n      productList.value.splice(currentIndex, 1);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 更新商品\r\n   * @param {string} productId - 商品ID\r\n   * @param {Object} updates - 更新数据\r\n   */\r\n  const updateProduct = (productId, updates) => {\r\n    const updateItem = (list) => {\r\n      const index = list.findIndex(p => p.id === productId);\r\n      if (index !== -1) {\r\n        list[index] = { ...list[index], ...updates, updateTime: Date.now() };\r\n      }\r\n    };\r\n    \r\n    updateItem(originalList.value);\r\n    updateItem(productList.value);\r\n  };\r\n\r\n  // ==================== 工具方法 ====================\r\n  /**\r\n   * 获取排序类型的中文名称\r\n   * @param {string} sortType - 排序类型\r\n   * @returns {string} 中文名称\r\n   */\r\n  const getSortTypeName = (sortType) => {\r\n    const names = {\r\n      [SORT_TYPES.DEFAULT]: '默认排序',\r\n      [SORT_TYPES.NEW]: '最新发布',\r\n      [SORT_TYPES.PRICE_ASC]: '价格从低到高',\r\n      [SORT_TYPES.PRICE_DESC]: '价格从高到低',\r\n      [SORT_TYPES.POPULAR]: '热门商品'\r\n    };\r\n    return names[sortType] || '未知排序';\r\n  };\r\n\r\n  // ==================== 返回API ====================\r\n  return {\r\n    // 状态\r\n    productList: paginatedList,\r\n    originalList,\r\n    currentSortType,\r\n    loading,\r\n    error,\r\n    totalCount,\r\n    isEmpty,\r\n    hasMore,\r\n    currentPage,\r\n    \r\n    // 方法\r\n    setProductList,\r\n    applySorting,\r\n    resetSorting,\r\n    filterProducts,\r\n    searchProducts,\r\n    loadMore,\r\n    refresh,\r\n    addProduct,\r\n    removeProduct,\r\n    updateProduct,\r\n    getSortTypeName,\r\n    \r\n    // 常量\r\n    SORT_TYPES\r\n  };\r\n}\r\n"],"names":["ref","computed","uni"],"mappings":"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"}