{"version":3,"file":"useLazyLoad.js","sources":["src/composables/useLazyLoad.js"],"sourcesContent":["/**\r\n * 图片懒加载组合式函数\r\n * @description 提供高性能的图片懒加载功能\r\n */\r\nimport { ref, onMounted, onUnmounted } from 'vue';\r\n\r\n/**\r\n * 图片懒加载Hook\r\n * @param {Object} options - 配置选项\r\n * @returns {Object} 懒加载相关状态和方法\r\n */\r\nexport function useLazyLoad(options = {}) {\r\n  const {\r\n    threshold = 0.1,\r\n    rootMargin = '50px',\r\n    placeholder = '',\r\n    errorImage = '',\r\n    enableRetry = true,\r\n    maxRetries = 3\r\n  } = options;\r\n\r\n  // ==================== 状态管理 ====================\r\n  const loading = ref(false);\r\n  const loaded = ref(false);\r\n  const error = ref(false);\r\n  const currentSrc = ref(placeholder);\r\n  const retryCount = ref(0);\r\n  \r\n  let observer = null;\r\n  let imageElement = null;\r\n\r\n  // ==================== 核心方法 ====================\r\n  /**\r\n   * 加载图片\r\n   * @param {string} src - 图片地址\r\n   * @returns {Promise} 加载Promise\r\n   */\r\n  const loadImage = (src) => {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n      \r\n      img.onload = () => {\r\n        loading.value = false;\r\n        loaded.value = true;\r\n        error.value = false;\r\n        currentSrc.value = src;\r\n        resolve(img);\r\n      };\r\n      \r\n      img.onerror = () => {\r\n        loading.value = false;\r\n        error.value = true;\r\n        \r\n        if (enableRetry && retryCount.value < maxRetries) {\r\n          retryCount.value++;\r\n          setTimeout(() => {\r\n            loadImage(src).then(resolve).catch(reject);\r\n          }, 1000 * retryCount.value); // 递增延迟重试\r\n        } else {\r\n          currentSrc.value = errorImage || placeholder;\r\n          reject(new Error('图片加载失败'));\r\n        }\r\n      };\r\n      \r\n      img.src = src;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * 开始加载图片\r\n   * @param {string} src - 图片地址\r\n   */\r\n  const load = async (src) => {\r\n    if (!src || loaded.value) return;\r\n    \r\n    loading.value = true;\r\n    \r\n    try {\r\n      await loadImage(src);\r\n    } catch (err) {\r\n      console.warn('图片加载失败:', src, err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 重试加载\r\n   * @param {string} src - 图片地址\r\n   */\r\n  const retry = (src) => {\r\n    retryCount.value = 0;\r\n    error.value = false;\r\n    load(src);\r\n  };\r\n\r\n  /**\r\n   * 重置状态\r\n   */\r\n  const reset = () => {\r\n    loading.value = false;\r\n    loaded.value = false;\r\n    error.value = false;\r\n    retryCount.value = 0;\r\n    currentSrc.value = placeholder;\r\n  };\r\n\r\n  // ==================== Intersection Observer ====================\r\n  /**\r\n   * 创建观察器\r\n   * @param {string} src - 图片地址\r\n   */\r\n  const createObserver = (src) => {\r\n    // 检查运行环境\r\n    if (typeof window === 'undefined' || !window.IntersectionObserver) {\r\n      // 不支持 Intersection Observer（如uni-app某些平台），直接加载\r\n      console.warn('LazyLoad: 当前环境不支持IntersectionObserver，直接加载图片');\r\n      load(src);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      observer = new IntersectionObserver(\r\n        (entries) => {\r\n          entries.forEach((entry) => {\r\n            if (entry.isIntersecting) {\r\n              load(src);\r\n              observer.unobserve(entry.target);\r\n            }\r\n          });\r\n        },\r\n        {\r\n          threshold,\r\n          rootMargin\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.warn('LazyLoad: 创建IntersectionObserver失败，直接加载图片', error);\r\n      load(src);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 观察元素\r\n   * @param {Element} element - DOM元素\r\n   * @param {string} src - 图片地址\r\n   */\r\n  const observe = (element, src) => {\r\n    if (!element || !src) return;\r\n    \r\n    // 在uni-app中，element可能是组件实例，需要获取实际的DOM元素\r\n    let actualElement = element;\r\n    \r\n    // 如果是uni-app组件实例，尝试获取DOM元素\r\n    if (element && typeof element === 'object' && element.$el) {\r\n      actualElement = element.$el;\r\n    }\r\n    \r\n    // 检查是否为有效的DOM元素\r\n    if (!actualElement || !actualElement.nodeType || actualElement.nodeType !== Node.ELEMENT_NODE) {\r\n      console.warn('LazyLoad: 提供的元素不是有效的DOM元素，直接加载图片');\r\n      load(src);\r\n      return;\r\n    }\r\n    \r\n    imageElement = actualElement;\r\n    \r\n    if (!observer) {\r\n      createObserver(src);\r\n    }\r\n    \r\n    if (observer) {\r\n      observer.observe(actualElement);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 停止观察\r\n   */\r\n  const unobserve = () => {\r\n    if (observer && imageElement) {\r\n      observer.unobserve(imageElement);\r\n      observer.disconnect();\r\n      observer = null;\r\n      imageElement = null;\r\n    }\r\n  };\r\n\r\n  // ==================== 生命周期 ====================\r\n  onUnmounted(() => {\r\n    unobserve();\r\n  });\r\n\r\n  // ==================== 返回API ====================\r\n  return {\r\n    // 状态\r\n    loading,\r\n    loaded,\r\n    error,\r\n    currentSrc,\r\n    retryCount,\r\n    \r\n    // 方法\r\n    load,\r\n    retry,\r\n    reset,\r\n    observe,\r\n    unobserve\r\n  };\r\n}\r\n\r\n/**\r\n * 图片预加载Hook\r\n * @param {Array} imageUrls - 图片URL数组\r\n * @returns {Object} 预加载相关状态和方法\r\n */\r\nexport function useImagePreload(imageUrls = []) {\r\n  const loadedImages = ref(new Set());\r\n  const failedImages = ref(new Set());\r\n  const loading = ref(false);\r\n  const progress = ref(0);\r\n\r\n  /**\r\n   * 预加载单张图片\r\n   * @param {string} src - 图片地址\r\n   * @returns {Promise}\r\n   */\r\n  const preloadImage = (src) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      \r\n      img.onload = () => {\r\n        loadedImages.value.add(src);\r\n        resolve({ success: true, src });\r\n      };\r\n      \r\n      img.onerror = () => {\r\n        failedImages.value.add(src);\r\n        resolve({ success: false, src });\r\n      };\r\n      \r\n      img.src = src;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * 预加载所有图片\r\n   * @param {Array} urls - 图片URL数组\r\n   */\r\n  const preloadAll = async (urls = imageUrls) => {\r\n    if (!urls.length) return;\r\n    \r\n    loading.value = true;\r\n    progress.value = 0;\r\n    \r\n    const promises = urls.map(async (url, index) => {\r\n      const result = await preloadImage(url);\r\n      progress.value = ((index + 1) / urls.length) * 100;\r\n      return result;\r\n    });\r\n    \r\n    const results = await Promise.all(promises);\r\n    loading.value = false;\r\n    \r\n    return results;\r\n  };\r\n\r\n  /**\r\n   * 清除缓存\r\n   */\r\n  const clearCache = () => {\r\n    loadedImages.value.clear();\r\n    failedImages.value.clear();\r\n    progress.value = 0;\r\n  };\r\n\r\n  return {\r\n    loadedImages,\r\n    failedImages,\r\n    loading,\r\n    progress,\r\n    preloadImage,\r\n    preloadAll,\r\n    clearCache\r\n  };\r\n}\r\n"],"names":["ref","uni","error","onUnmounted"],"mappings":"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"}