{"version":3,"file":"useThrottle.js","sources":["src/composables/useThrottle.js"],"sourcesContent":["/**\n * 节流函数组合式函数\n * @description 提供通用的节流功能，避免频繁调用函数\n */\nimport { ref } from 'vue';\n\n/**\n * 创建节流函数\n * @param {Function} fn - 需要节流的函数\n * @param {number} delay - 延迟时间（毫秒）\n * @returns {Function} 节流后的函数\n */\nexport function useThrottle(fn, delay = 300) {\n  const isThrottled = ref(false);\n  \n  return function(...args) {\n    \n    if (isThrottled.value) {\n      return;\n    }\n    \n    isThrottled.value = true;\n    fn.apply(this, args);\n    \n    setTimeout(() => {\n      isThrottled.value = false;\n    }, delay);\n  };\n}\n\n/**\n * 防抖函数\n * @param {Function} fn - 需要防抖的函数\n * @param {number} delay - 延迟时间（毫秒）\n * @returns {Function} 防抖后的函数\n */\nexport function useDebounce(fn, delay = 300) {\n  let timeoutId = null;\n  \n  return function(...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      fn.apply(this, args);\n    }, delay);\n  };\n}\n\n/**\n * 可控制的节流Hook\n * @param {number} delay - 延迟时间\n * @returns {Object} 包含节流状态和控制方法\n */\nexport function useThrottleControl(delay = 300) {\n  const isThrottled = ref(false);\n  \n  const throttle = (fn, ...args) => {\n    if (isThrottled.value) return false;\n    \n    isThrottled.value = true;\n    fn(...args);\n    \n    setTimeout(() => {\n      isThrottled.value = false;\n    }, delay);\n    \n    return true;\n  };\n  \n  const reset = () => {\n    isThrottled.value = false;\n  };\n  \n  return {\n    isThrottled,\n    throttle,\n    reset\n  };\n}\n"],"names":["ref"],"mappings":";;AAYO,SAAS,YAAY,IAAI,QAAQ,KAAK;AAC3C,QAAM,cAAcA,kBAAI,KAAK;AAE7B,SAAO,YAAY,MAAM;AAEvB,QAAI,YAAY,OAAO;AACrB;AAAA,IACD;AAED,gBAAY,QAAQ;AACpB,OAAG,MAAM,MAAM,IAAI;AAEnB,eAAW,MAAM;AACf,kBAAY,QAAQ;AAAA,IACrB,GAAE,KAAK;AAAA,EACZ;AACA;;"}