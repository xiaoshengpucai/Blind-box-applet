{"version":3,"file":"useThrottle.js","sources":["src/composables/useThrottle.js"],"sourcesContent":["/**\r\n * 节流函数组合式函数\r\n * @description 提供通用的节流功能，避免频繁调用函数\r\n */\r\nimport { ref } from 'vue';\r\n\r\n/**\r\n * 创建节流函数\r\n * @param {Function} fn - 需要节流的函数\r\n * @param {number} delay - 延迟时间（毫秒）\r\n * @returns {Function} 节流后的函数\r\n */\r\nexport function useThrottle(fn, delay = 300) {\r\n  const isThrottled = ref(false);\r\n  \r\n  return function(...args) {\r\n    if (isThrottled.value) return;\r\n    \r\n    isThrottled.value = true;\r\n    fn.apply(this, args);\r\n    \r\n    setTimeout(() => {\r\n      isThrottled.value = false;\r\n    }, delay);\r\n  };\r\n}\r\n\r\n/**\r\n * 防抖函数\r\n * @param {Function} fn - 需要防抖的函数\r\n * @param {number} delay - 延迟时间（毫秒）\r\n * @returns {Function} 防抖后的函数\r\n */\r\nexport function useDebounce(fn, delay = 300) {\r\n  let timeoutId = null;\r\n  \r\n  return function(...args) {\r\n    clearTimeout(timeoutId);\r\n    timeoutId = setTimeout(() => {\r\n      fn.apply(this, args);\r\n    }, delay);\r\n  };\r\n}\r\n\r\n/**\r\n * 可控制的节流Hook\r\n * @param {number} delay - 延迟时间\r\n * @returns {Object} 包含节流状态和控制方法\r\n */\r\nexport function useThrottleControl(delay = 300) {\r\n  const isThrottled = ref(false);\r\n  \r\n  const throttle = (fn, ...args) => {\r\n    if (isThrottled.value) return false;\r\n    \r\n    isThrottled.value = true;\r\n    fn(...args);\r\n    \r\n    setTimeout(() => {\r\n      isThrottled.value = false;\r\n    }, delay);\r\n    \r\n    return true;\r\n  };\r\n  \r\n  const reset = () => {\r\n    isThrottled.value = false;\r\n  };\r\n  \r\n  return {\r\n    isThrottled,\r\n    throttle,\r\n    reset\r\n  };\r\n}\r\n"],"names":["ref"],"mappings":";;AAYO,SAAS,YAAY,IAAI,QAAQ,KAAK;AAC3C,QAAM,cAAcA,kBAAI,KAAK;AAE7B,SAAO,YAAY,MAAM;AACvB,QAAI,YAAY;AAAO;AAEvB,gBAAY,QAAQ;AACpB,OAAG,MAAM,MAAM,IAAI;AAEnB,eAAW,MAAM;AACf,kBAAY,QAAQ;AAAA,IACrB,GAAE,KAAK;AAAA,EACZ;AACA;;"}