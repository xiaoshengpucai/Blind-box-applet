{"version":3,"file":"index.js","sources":["src/api/index.js"],"sourcesContent":["/**\r\n * API 请求层\r\n * @description 统一的API请求管理，包含缓存、错误处理、重试机制等\r\n */\r\nimport axios from 'axios';\r\nimport mpAdapter from 'axios-miniprogram-adapter'\r\n\r\n// ==================== 配置常量 ====================\r\nconst API_CONFIG = {\r\n  BASE_URL: 'http://localhost:3000/api/',\r\n  TIMEOUT: 10000,\r\n  RETRY_TIMES: 3,\r\n  RETRY_DELAY: 1000,\r\n  CACHE_TIME: 5 * 60 * 1000, // 5分钟缓存\r\n  ACCESS_KEY: '624590'\r\n};\r\n\r\n// ==================== 创建axios实例 ====================\r\nconst service = axios.create({\r\n  baseURL: API_CONFIG.BASE_URL,\r\n  timeout: API_CONFIG.TIMEOUT,\r\n  headers: {\r\n    'access-key': API_CONFIG.ACCESS_KEY,\r\n    'Content-Type': 'application/json'\r\n  },\r\n  adapter: mpAdapter\r\n});\r\n\r\n// ==================== 缓存管理 ====================\r\nclass ApiCache {\r\n  constructor() {\r\n    this.cache = new Map();\r\n    this.cacheTimers = new Map();\r\n  }\r\n\r\n  /**\r\n   * 生成缓存键\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} params - 请求参数\r\n   * @returns {string} 缓存键\r\n   */\r\n  generateKey(url, params = {}) {\r\n    return `${url}?${JSON.stringify(params)}`;\r\n  }\r\n\r\n  /**\r\n   * 获取缓存\r\n   * @param {string} key - 缓存键\r\n   * @returns {any} 缓存数据\r\n   */\r\n  get(key) {\r\n    return this.cache.get(key);\r\n  }\r\n\r\n  /**\r\n   * 设置缓存\r\n   * @param {string} key - 缓存键\r\n   * @param {any} data - 缓存数据\r\n   * @param {number} ttl - 缓存时间（毫秒）\r\n   */\r\n  set(key, data, ttl = API_CONFIG.CACHE_TIME) {\r\n    this.cache.set(key, data);\r\n    \r\n    // 清除之前的定时器\r\n    if (this.cacheTimers.has(key)) {\r\n      clearTimeout(this.cacheTimers.get(key));\r\n    }\r\n    \r\n    // 设置新的过期定时器\r\n    const timer = setTimeout(() => {\r\n      this.cache.delete(key);\r\n      this.cacheTimers.delete(key);\r\n    }, ttl);\r\n    \r\n    this.cacheTimers.set(key, timer);\r\n  }\r\n\r\n  /**\r\n   * 删除缓存\r\n   * @param {string} key - 缓存键\r\n   */\r\n  delete(key) {\r\n    this.cache.delete(key);\r\n    if (this.cacheTimers.has(key)) {\r\n      clearTimeout(this.cacheTimers.get(key));\r\n      this.cacheTimers.delete(key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空所有缓存\r\n   */\r\n  clear() {\r\n    this.cache.clear();\r\n    this.cacheTimers.forEach(timer => clearTimeout(timer));\r\n    this.cacheTimers.clear();\r\n  }\r\n\r\n  /**\r\n   * 检查缓存是否存在\r\n   * @param {string} key - 缓存键\r\n   * @returns {boolean} 是否存在\r\n   */\r\n  has(key) {\r\n    return this.cache.has(key);\r\n  }\r\n}\r\n\r\nconst apiCache = new ApiCache();\r\n\r\n// ==================== 重试机制 ====================\r\n/**\r\n * 请求重试函数\r\n * @param {Function} requestFn - 请求函数\r\n * @param {number} retries - 重试次数\r\n * @param {number} delay - 重试延迟\r\n * @returns {Promise} 请求结果\r\n */\r\nconst retryRequest = async (requestFn, retries = API_CONFIG.RETRY_TIMES, delay = API_CONFIG.RETRY_DELAY) => {\r\n  try {\r\n    return await requestFn();\r\n  } catch (error) {\r\n    if (retries > 0 && isRetryableError(error)) {\r\n      console.log(`请求失败，${delay}ms后进行第${API_CONFIG.RETRY_TIMES - retries + 1}次重试`);\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n      return retryRequest(requestFn, retries - 1, delay * 1.5); // 指数退避\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 判断是否为可重试的错误\r\n * @param {Error} error - 错误对象\r\n * @returns {boolean} 是否可重试\r\n */\r\nconst isRetryableError = (error) => {\r\n  // 网络错误、超时错误、5xx服务器错误可以重试\r\n  return !error.response || \r\n         error.code === 'ECONNABORTED' ||\r\n         (error.response.status >= 500 && error.response.status < 600);\r\n};\r\n\r\n// ==================== 请求拦截器 ====================\r\nservice.interceptors.request.use(\r\n  (config) => {\r\n    // 添加请求时间戳，用于日志\r\n    config.metadata = { startTime: Date.now() };\r\n    \r\n    // 添加请求ID，用于追踪\r\n    config.requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    console.log(`[API Request] ${config.requestId}: ${config.method?.toUpperCase()} ${config.url}`);\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('[API Request Error]:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// ==================== 响应拦截器 ====================\r\nservice.interceptors.response.use(\r\n  (response) => {\r\n    const { config } = response;\r\n    const duration = Date.now() - config.metadata.startTime;\r\n    \r\n    console.log(`[API Response] ${config.requestId}: ${response.status} (${duration}ms)`);\r\n    \r\n    // 统一处理响应数据格式\r\n    const { data } = response;\r\n    // 根据实际API的数据结构调整\r\n    if (data.status === 200 || data.code === 200 || data.success) {\r\n      return data.data || data.result || data;\r\n    } else {\r\n      throw new Error(data.message || data.msg || '请求失败');\r\n    }\r\n  },\r\n  (error) => {\r\n    const { config } = error;\r\n    const duration = config?.metadata ? Date.now() - config.metadata.startTime : 0;\r\n    \r\n    console.error(`[API Error] ${config?.requestId}: ${error.message} (${duration}ms)`);\r\n    \r\n    // 统一错误处理\r\n    let errorMessage = '网络请求失败';\r\n    \r\n    if (error.response) {\r\n      // 服务器响应错误\r\n      const { status, data } = error.response;\r\n      switch (status) {\r\n        case 400:\r\n          errorMessage = '请求参数错误';\r\n          break;\r\n        case 401:\r\n          errorMessage = '未授权，请重新登录';\r\n          break;\r\n        case 403:\r\n          errorMessage = '拒绝访问';\r\n          break;\r\n        case 404:\r\n          errorMessage = '请求的资源不存在';\r\n          break;\r\n        case 500:\r\n          errorMessage = '服务器内部错误';\r\n          break;\r\n        default:\r\n          errorMessage = data?.message || data?.msg || `服务器错误 (${status})`;\r\n      }\r\n    } else if (error.request) {\r\n      // 网络错误\r\n      errorMessage = '网络连接失败，请检查网络';\r\n    } else if (error.code === 'ECONNABORTED') {\r\n      // 超时错误\r\n      errorMessage = '请求超时，请重试';\r\n    }\r\n    \r\n    error.friendlyMessage = errorMessage;\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// ==================== API请求封装 ====================\r\n/**\r\n * 通用请求方法\r\n * @param {Object} options - 请求配置\r\n * @returns {Promise} 请求结果\r\n */\r\nconst request = async (options) => {\r\n  const {\r\n    url,\r\n    method = 'GET',\r\n    params,\r\n    data,\r\n    headers,\r\n    cache = true,\r\n    cacheTime = API_CONFIG.CACHE_TIME,\r\n    retry = true,\r\n    ...otherConfig\r\n  } = options;\r\n\r\n  // 生成缓存键\r\n  const cacheKey = apiCache.generateKey(url, { ...params, ...data });\r\n  \r\n  // 检查缓存（仅GET请求且启用缓存）\r\n  if (method.toUpperCase() === 'GET' && cache && apiCache.has(cacheKey)) {\r\n    console.log(`[API Cache Hit] ${url}`);\r\n    return apiCache.get(cacheKey);\r\n  }\r\n\r\n  // 创建请求函数\r\n  const requestFn = () => service({\r\n    url,\r\n    method,\r\n    params,\r\n    data,\r\n    headers,\r\n    ...otherConfig\r\n  });\r\n\r\n  try {\r\n    // 执行请求（带重试）\r\n    const result = retry ? await retryRequest(requestFn) : await requestFn();\r\n    \r\n    // 缓存结果（仅GET请求且启用缓存）\r\n    if (method.toUpperCase() === 'GET' && cache) {\r\n      apiCache.set(cacheKey, result, cacheTime);\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    // 显示友好的错误提示\r\n    if (error.friendlyMessage) {\r\n      uni.showToast({\r\n        title: error.friendlyMessage,\r\n        icon: 'none',\r\n        duration: 2000\r\n      });\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ==================== 便捷方法 ====================\r\nconst api = {\r\n  /**\r\n   * GET请求\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} params - 请求参数\r\n   * @param {Object} options - 其他配置\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  get: (url, params, options = {}) => {\r\n    return request({\r\n      url,\r\n      method: 'GET',\r\n      params,\r\n      ...options\r\n    });\r\n  },\r\n\r\n  /**\r\n   * POST请求\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} data - 请求数据\r\n   * @param {Object} options - 其他配置\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  post: (url, data, options = {}) => {\r\n    return request({\r\n      url,\r\n      method: 'POST',\r\n      data,\r\n      cache: false, // POST请求默认不缓存\r\n      ...options\r\n    });\r\n  },\r\n\r\n  /**\r\n   * PUT请求\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} data - 请求数据\r\n   * @param {Object} options - 其他配置\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  put: (url, data, options = {}) => {\r\n    return request({\r\n      url,\r\n      method: 'PUT',\r\n      data,\r\n      cache: false,\r\n      ...options\r\n    });\r\n  },\r\n\r\n  /**\r\n   * DELETE请求\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} params - 请求参数\r\n   * @param {Object} options - 其他配置\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  delete: (url, params, options = {}) => {\r\n    return request({\r\n      url,\r\n      method: 'DELETE',\r\n      params,\r\n      cache: false,\r\n      ...options\r\n    });\r\n  },\r\n\r\n  /**\r\n   * 清除所有缓存\r\n   */\r\n  clearCache: () => {\r\n    apiCache.clear();\r\n  },\r\n\r\n  /**\r\n   * 清除指定缓存\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} params - 请求参数\r\n   */\r\n  clearCacheByKey: (url, params = {}) => {\r\n    const key = apiCache.generateKey(url, params);\r\n    apiCache.delete(key);\r\n  }\r\n};\r\n\r\n// ==================== 导出 ====================\r\nexport default api;\r\nexport { service, apiCache, API_CONFIG };\r\n"],"names":["axios","mpAdapter","uni"],"mappings":"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"}